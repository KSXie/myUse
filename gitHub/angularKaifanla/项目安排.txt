基本流程：

产品经理：根据客户的需求，编写需求文档，原型图。
UI设计  ：指定具体的大小、尺寸
开发人员：根据原型图和设计图做开发
①前端：（web、android、iOS） 
与后端约定好需要的接口和数据格式
②后端：写API
测试人员：测试稳定性、异常处理

先去模拟json数据，能否正常显示，再与后端联合调试，交给测试部门，部署到线上，配合着运营部门，进行开发的迭代



项目的技术架构：
SPA应用：采用angularJS实现SPA应用（路由、MVC、$http）
响应式：bootStrap(视图)
服务器端：php实现与数据库的交互（数据库）






使用ngRoute搭建SPA应用的基本步骤：
①引入angular.js angular-route.js
②创建模块，指定依赖于ng、ngRoute
③ng-view
④创建代码片段
⑤路由词典
app.config(function($routeProvider){

	$routeProvider.when('/start',{
		templateUrl:'tpl/start.html',
		controller:'startCtrl'
	})
	.otherwise({redirectTo:'/start'})
})

跳转：
① <a href='#/start'></a>
② $location.path('/start');

参数传递：
方式1：
①明确发送和接收 ②配置接收方的路由 $routeParams.id 
③<a href='#/start/12'></a> $location.path('/start/12');
方式2：
借助父控制器或者$rootScope
方式3：
localStorage/sessionStorage...

1、项目的搭建
2、所有静态页面的编写---》运行通畅，数据静态死数据
3、调用php页面，联调。


代码片段：start  main detail order myOrder

一、搭建项目框架
1、创建项目，添加css、js、img、tpl文件夹，添加必须引用的css、js文件，添加自定义的css、js文件以及img图片，并创建完整的引导页面kaifanla.html；
2、编写kaifanla.html文件：
  定义模块ng-app=”kaifanla”
  引入bootstrap.css以及自定义的css文件
  定义用于替换模板的视图
  引入angular.js angular-route.js文件，并引入自定义的js文件。
3、添加模板文件：添加 start/main/detail/order/myorder页面，每个页面中删掉原有内容，添加一个文字；
4、编写 kaifanla.js 文件
  定义各自的控制器
  定义路由：为所有模板定义路由，默认跳转到start
5、测试：跳转是否正常，是否有错误

二、静态页面的编写

1、起始页 start

2、菜单列表 main
header/footer/菜品列表

3、详情页 detail


4、表单提交页 order、个人中心页 myOrder



三、编写php页面

分析
main:
①分页查询 dish_getbypage.php
②根据关键词进行搜索  dish_getbykw.php

detail:
①根据id获取详情 dish_getbyid.php

order:
①将提交的用户数据插入到数据库中 order_add.php

myOrder:
①获取当前用户的订单信息 order_getbyphone.php


注意事项：
①初始化数据库，启动apache和mySql
②工程放在C:/xampp/htdocs/...
③调试要访问php文件，端口:80. 
访问php的时候，直接将php文件内容返回了，说明访问的方式是不对的！
④写完php文件之后，浏览器先去访问，如果测试没问题，接着实现具体的模型数据、视图。



三、SQL语句的基本语法

1、MySQL分页查询
分页查询的语法如下：
  SELECT 列名 FROM 表名  LIMIT  起始行, 行数 ;

提示：起始行从0开始；行数指定此次返回的最多可能数。

2、MySQL查询
精确查询：
SELECT 列名 FROM 表名 WHERE did=3;
SELECT 列名 FROM 表名 WHERE name='鸡蛋';

模糊查询：
SELECT 列名 FROM 表名 WHERE 列名 LIKE '%关键字%'


3、MySQL获取自增长的键值
获取最近的一条INSERT语句产生的自增主键，代码如下：
$id = mysqli_insert_id( $conn );

4、MySQL跨表查询/多表查询

跨表查询时，代码如下所示：

  SELECT 表1.列1，表1.列2, 表2.列3, 表2.列4    FROM 表1, 表2   WHERE 表1.列=表2.列;





编写后台页面：
1、分页加载：dish_getbypage.php
约定：
每次读5条数据、
传参start(本次要从哪里开始接着读数据回来)

 SELECT 列名 FROM 表名  LIMIT  起始行, 行数 ;

2、根据关键词 实现一个模糊查询
dish_getbykw.php  原材料或者菜品名称包含该关键字信息
约定：kw

3、根据菜品的id 查询详情信息
约定：did 精确查询
dish_getbyid.php

4、将表单中用户输入数据 写入到kf_order
order_add.php

约定：
user_name
sex
phone
addr
did
注意：order_time
要求：参数有任何一个没有发过来，直接返回


5、order_getbyphone.php （14:10 - 14:25）
根据下单成功的时候的手机号，得到该手机号所有的订单信息。

跨表查询：
代码如下所示：

  SELECT 表1.列1，表1.列2, 表2.列3, 表2.列4    FROM 表1, 表2   WHERE 表1.列=表2.列;

约定：
	phone


进入联调：
前端安装后台接口的参数要求，去调用后台所编写api接口，按照后台返回的数据格式显示在视图中。

1、main
①进入页面就加载数据
创建控制器，在控制器的处理函数中发起网络请求将返回的数据绑定到视图去显示
②加载更多
从当前列表长度位置 发起网络请求
③搜索
方向2的绑定（ngModel） $watch 

2、detail
需要接受main传递来的参数，根据参数去发起网络请求详情信息，将数据绑定到视图去显示。

id  --> dish_getbyid.php -->绑定到视图

①发main-》 收detail
②配置接收方的路由
/kflDetail
/kflDetail/:did
③取值
$routeParams.did
④发送


快速排查错误：
①看控制台输出的错误信息
②看network，请求的php参数和返回值

3、order
①接受detail发来的参数
②将用户所有的输入的信息 发给服务器端order_add.php
③将返回的结果显示在视图


4 每日一练：
myOrder.html

根据手机号（下单成功，将手机号存在sessionStorage）
order_getbyphone.php























